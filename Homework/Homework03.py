# 1 Задайте список из нескольких чисел. Напишите программу, которая найдёт сумму элементов списка, стоящих на нечётной позиции.
# Пример: [2, 3, 5, 9, 3] -> на нечётных позициях элементы 3 и 9, ответ: 12
def sum_of_odd_index(list_numbers):
    """ Принимает на вход список чисел и выдаёт сумму значений нечетных индексов """
    print(
        f'Сумма значений на нечетных индексах равна {sum(list_numbers[1::2])}')


list_numbers = [2, 3, 5, 9, 3]
sum_of_odd_index(list_numbers)

# 2 Напишите программу, которая найдёт произведение пар чисел списка. Парой считаем первый и последний элемент, второй и предпоследний и т.д.
# Пример:    [2, 3, 4, 5, 6] => [12, 15, 16];        [2, 3, 5, 6] => [12, 15];


def product_of_pairs(list_numbers1):
    """ Принимает на вход список чисел и выдаёт произведение парных значений (первый и последний, второй и предпоследний...) """
    len_lst = len(list_numbers1)
    product_list = [list_numbers1[i] * list_numbers1[-i - 1]
                    for i in range(len_lst // 2)]
    if len_lst % 2 == 1:
        product_list.append(list_numbers1[len_lst // 2] ** 2)
    print('Список произведения пар чисел:', product_list)


list_numbers1 = [2, 3, 4, 5, 6]
product_of_pairs(list_numbers1)

# 3 Задайте список из вещественных чисел. Напишите программу, которая найдёт разницу между максимальным и минимальным значением дробной части элементов.
# Пример:        [1.1, 1.2, 3.1, 5.17, 10.02] => 0.18 или 18             [4.07, 5.1, 8.2444, 6.9814] - 0.9114 или 9114


def diff_max_min_float(list_float_numbers):
    """ Принимает на вход список вещественных чисел и выдаёт разницу дробной части между максимальным и минимальным значением """
    list_float_numbers = [round(_ - int(_), 5) for _ in list_float_numbers]
    print(f'Разница между маскимальным и минимальным значением дробной части =',
          round(max(list_float_numbers) - min(list_float_numbers), 5))


list_float_numbers = [1.1, 1.2, 3.1, 5.17, 10.02]
diff_max_min_float(list_float_numbers)

# 4 Напишите программу, которая будет преобразовывать десятичное число в двоичное. Подумайте, как это можно решить с помощью рекурсии.
# Не использовать функцию bin
# Пример: 45 -> 101101   3 -> 11     2 -> 10


def binary(num, bin_list):
    """Преобразование десятичного числа в двоичное"""
    if num < 2:
        return '1' + bin_list
    else:
        return binary(num // 2, str(num % 2) + bin_list)


num = int(input('Введите целое число: '))
print(f'{num} -> {binary(num, "")}')

#5 Задайте число. Составьте список чисел Фибоначчи, в том числе для отрицательных индексов.
# Пример: для k = 8 список будет выглядеть так: [-21 ,13, -8, 5, −3, 2, −1, 1, 0, 1, 1, 2, 3, 5, 8, 13, 21]
def fibonacci(n):
    """ Рассчитывает число Фибоначчи """
    if n in (1, 2):
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)

def reversed_fibonacci(n):
    """ "Переворот" числа Фиббоначи """
    if n in (1, 2):
        return 1
    return reversed_fibonacci(n + 2) - reversed_fibonacci(n + 1)

def negafibonacci() -> list:
    """ Рассчитывает значение числа Негафибоначчи, на основании числа фибоначчи и его "перевернутого" значения """
    a = []
    b = []
    n = int(input("Введите число для последовательности Фибоначчи: "))
    
    for i in range(-n, n + 1):
        if i > 0:
            a.append((fibonacci(i)))
        else:
            b.append(reversed_fibonacci(i))
    return f'для k={n} список Негафибоначчи: {b + a}'
    
print(negafibonacci())
